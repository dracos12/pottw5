{"version":3,"sources":["webpack:///webpack/bootstrap 011489fbdbd35f5ac2da","webpack:///./src/gameobject.ts","webpack:///external \"PIXI\"","webpack:///./src/index.ts","webpack:///./src/theSea.ts","webpack:///./src/island.ts","webpack:///./src/ship.ts","webpack:///./node_modules/victor/index.js"],"names":[],"mappings":"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,UAAE,KAAQ,KAAM,QAAO,KAAQ,QAAG;AAClC,UAAE,KAAQ,KAAM,QAAG,CAAK,KAAQ,QAAG,GACxC;AAAC;AAED,mBAAM,SAAN;AACwD;AACjD,YAAK,KAAY,eAAQ,KAAO,OAClC;AACM,gBAAK,KAAY,cAAO,KAAO,OAAE;AAC5B,qBAAM,SAAS;AAChB,oBAAK,KAAM,QAAO,KAAa,aAC1B,KAAM,QAAO,KACzB;AACI,mBAAE;AACE,qBAAM,SAAS;AAChB,oBAAK,KAAM,QAAO,KAAa,aAC1B,KAAM,QAAO,KACzB;AACJ;AAAC;AAEG,aAAkB;AAEW;AAC7B,aAER;AAAC;AACL,WAAC;AAAA,EAhKiC,aAgKjC;;;;;;;AChLD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC,eAAe;AACnD;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA,6BAA6B,kBAAkB;AAC/C,6BAA6B,kBAAkB;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA,wCAAwC,eAAe;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,YAAY;AACZ;AACA;AACA;AACA,SAAS;AACT;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"./dist/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 011489fbdbd35f5ac2da","//\r\n// GameObject - the root class of all sprites\r\n//\r\nimport * as PIXI from \"pixi.js\";\r\n\r\nexport const enum ObjectType {\r\n    NONE,\r\n    ISLAND,\r\n    SHIP\r\n}\r\n\r\ndeclare var PolyK: any;\r\n\r\nexport default class GameObject\r\n{\r\n    // the game object's sprite keeps positional information  x,y\r\n\r\n    protected vx:number = 0; // velocity information\r\n    protected vy:number = 0;\r\n\r\n    protected z:number = 0;  // z-sorting if necessary... z sort normally done by y position\r\n\r\n    protected objType:ObjectType = ObjectType.NONE;\r\n\r\n    protected sprite:PIXI.Sprite;\r\n\r\n    protected polyData:any; // use any for ease of use with PolyK\r\n\r\n    constructor()\r\n    {\r\n        \r\n    }\r\n\r\n    public getType() {\r\n        return this.objType;\r\n    }\r\n\r\n    public setSprite(newSprite:PIXI.Sprite)\r\n    {\r\n        this.sprite = newSprite;\r\n    }\r\n\r\n    public getSprite()\r\n    {\r\n        return this.sprite;\r\n    }\r\n\r\n    public setPolyData(p:any) {\r\n        this.polyData = p;\r\n        this.convertPolyDataToCartesian();\r\n    }\r\n\r\n    private convertPolyDataToCartesian()\r\n    {\r\n        // all data provided is an anti-clockwise polygonal data in local bitmap coordinates \r\n        // relative to the 0,0 top,left of the bitmap\r\n        // PolyK needs this data in cartesian format, with 0,0 at bottom,left of the world\r\n\r\n        //console.log(this.polyData);\r\n        // loop through the array\r\n        for (var i = 0; i<this.polyData.length; i++)\r\n        {\r\n            if (i%2 == 0) // each even index is an \"x\" coordinate\r\n            {\r\n                // x axis is same direction as cartesian\r\n                this.polyData[i] = this.polyData[i] + this.sprite.x; // world coord x\r\n            }\r\n            else // each odd index is a \"y\" coordinate\r\n            {\r\n                // bottom left of our \"world\" is 0,8192\r\n                var cartSpriteY = 8192 - this.sprite.y; \r\n                this.polyData[i] = cartSpriteY - this.polyData[i];\r\n            }   \r\n        }\r\n        //console.log(this.polyData);\r\n    }\r\n\r\n    public cartesianHitTest = (p:PIXI.Point) => {\r\n        //console.log(this.polyData);\r\n        if (this.polyData) {\r\n            // point assumed to be in cartesian coords... compare this to our polyData via PolyK library\r\n            return PolyK.ContainsPoint(this.polyData, p.x, p.y);\r\n        } else {\r\n            console.log(\"polyData not yet defined\");\r\n        }\r\n    }\r\n\r\n    update()\r\n    {\r\n        // NOP for base class functionality\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./node_modules/source-map-loader!./src/gameobject.ts","module.exports = PIXI;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"PIXI\"\n// module id = 1\n// module chunks = 0","import * as PIXI from 'pixi.js';\r\nimport theSea from './theSea';\r\n\r\nexport default class Core {\r\n    private _renderer:PIXI.CanvasRenderer|PIXI.WebGLRenderer;\r\n    private _world:PIXI.Container;\r\n    private _sea:theSea;\r\n\r\n    constructor() {\r\n        this._renderer = PIXI.autoDetectRenderer(window.innerWidth, window.innerHeight,{backgroundColor: 0x7BA4DF});\r\n        this._world = new PIXI.Container();\r\n        document.body.appendChild(this._renderer.view);\r\n\r\n        // create a new sea object\r\n        this._sea = new theSea();\r\n        this._sea.init(this.seaLoadedCallback);\r\n    }\r\n\r\n    private seaLoadedCallback = () =>\r\n    {\r\n        // add listener to the stage - stage declared in main, top level js file\r\n        console.log(\"PotTW: build 0.0.12\");\r\n        this._world.interactive = true;\r\n        this._world.on(\"mousemove\", this._sea.mouseMoveHandler);\r\n        //mousewheel not part of Pixi so add the event to the DOM\r\n        document.body.addEventListener(\"wheel\", this._sea.mouseWheelHandler, false);\r\n\r\n        this._world.addChild(this._sea.getContainer());\r\n        this.update();\r\n    }\r\n\r\n    public update = () => \r\n    {\r\n\r\n        this._sea.update();\r\n\r\n        this._renderer.render(this._world);\r\n\r\n        requestAnimationFrame(this.update);\r\n    }\r\n\r\n}\r\n\r\nlet game = new Core();\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/source-map-loader!./src/index.ts","\r\nimport * as PIXI from 'pixi.js';\r\nimport GameObject  from './gameobject';\r\nimport { ObjectType } from './gameobject';\r\nimport Island from './island';\r\nimport Ship from './ship';\r\n\r\ndeclare var PolyK: any;\r\n\r\nexport default class theSea \r\n{\r\n    private container:PIXI.Container = new PIXI.Container();\r\n    \r\n    private deltaX:number = 0;\r\n    private deltaY:number = 0;\r\n    private lastX:number = -1;\r\n    private lastY:number = -1;\r\n\r\n    private loadCallback:Function;\r\n\r\n    private objectArray: Array<GameObject> = []; // array of all sprites added to theSea islands and ships (later, projectiles as well)\r\n\r\n    private wheelScale = 0.25;\r\n\r\n    private selectedBoat:Ship; // what boat does the user have selected\r\n\r\n    // javascript style mouse wheel handler, pixi does not support mouse wheel\r\n    mouseWheelHandler = (e:any) => {\r\n        //console.log(e);\r\n\r\n        if (e.wheelDelta > 0) { // scroll in\r\n            this.wheelScale += 0.05;\r\n            if (this.wheelScale > 2.0)\r\n                this.wheelScale = 2.0;\r\n            //console.log(\"wheel in\");\r\n        } else { // scroll out\r\n            this.wheelScale -= 0.05;\r\n            if (this.wheelScale < 0.10)\r\n                this.wheelScale = 0.10;\r\n            //console.log(\"wheel out\");\r\n        }\r\n\r\n        let pos = new PIXI.Point(e.clientX, e.clientY);\r\n        let preZoomWorld:PIXI.Point = this.container.toLocal(pos); //this.screenToWorld(e.clientX, e.clientY);  \r\n        \r\n        //\r\n        // perform the scale to the container\r\n        //\r\n        this.container.scale.x = this.container.scale.y = this.wheelScale;\r\n        \r\n        // console.log(\"scale: \" + this.wheelScale.toFixed(2) + \r\n        //             \" pos: \" + this.container.x.toFixed(2) + \",\" + this.container.y.toFixed(2) + \" \" + \r\n        //             \"w: \" + this.container.width.toFixed(2) + \r\n        //             \" h: \" + this.container.height.toFixed(2) +\r\n        //             \" mouse: \" + e.clientX + \",\" + e.clientY\r\n        //             );\r\n\r\n        //where is the zoom location now, after we changed the scale?\r\n        let postZoomWorld = this.container.toLocal(pos); //this.screenToWorld(e.clientX, e.clientY);\r\n        \r\n        //console.log(\"pre: \" + preZoomWorld.x + \",\" + preZoomWorld.y + \" post: \" + postZoomWorld.x + \",\" + postZoomWorld.y);\r\n\r\n        let preZoomGlobal = this.container.toGlobal(preZoomWorld);\r\n        let postZoomGlobal = this.container.toGlobal(postZoomWorld);\r\n        \r\n        //move the world so that the zoomed-location goes back to where it was on the screen before scaling        \r\n        this.container.x += postZoomGlobal.x - preZoomGlobal.x ;   \r\n        this.container.y += postZoomGlobal.y - preZoomGlobal.y; \r\n    }\r\n\r\n    private polyKTest()\r\n    {\r\n        var p =  [0,0, 1,0, 1,1, 0,1];\r\n        var myBool = PolyK.IsSimple(p);\r\n        console.log(\"IsSimple retrurns: \" + myBool);\r\n    }\r\n\r\n    // pixi style event handler, not the same arguments as javascript mouse event\r\n    mouseMoveHandler = (e:any) => {\r\n        //document.getElementById(\"log\").innerText = e.type;\r\n        //console.log(\"G: \" +e.data.global.x + \",\" + e.data.global.y);\r\n        //console.log(\"mouseMoved\");\r\n        // console.log(this);\r\n\r\n       // console.log(\"L: \" + this.container.toLocal(e.data.global).x + \", \" + this.container.toLocal(e.data.global).y);\r\n\r\n        if (e.data.buttons == 1) // left button is down \r\n        {\r\n            //console.log(\"LeftDown\");\r\n            var doDelta = true;\r\n            if (this.lastX == -1)\r\n                doDelta = false;\r\n\r\n            if (doDelta)\r\n            {\r\n                this.deltaX = e.data.global.x - this.lastX;\r\n                this.deltaY = e.data.global.y - this.lastY;\r\n                //console.log(this.deltaX + \",\" + this.deltaY);\r\n            }\r\n\r\n            //console.log(e);\r\n            //console.log(e.data.global.x + \",\" + e.data.global.y);\r\n            this.lastX = e.data.global.x;\r\n            this.lastY = e.data.global.y;\r\n        }\r\n        else // button is up\r\n        {\r\n            this.deltaX = 0;\r\n            this.deltaY = 0;\r\n            this.lastX = -1;\r\n            this.lastY = -1;\r\n        }\r\n\r\n        //take the mouse coords and convert to world coords\r\n        let pos = new PIXI.Point(e.data.global.x, e.data.global.y);\r\n        let mouseWorld:PIXI.Point = this.container.toLocal(pos);\r\n        // now convert this to cartesian coordinates\r\n        // x is fine as is\r\n        // y is inverted from bottom left of sea tiles 0,8192\r\n        mouseWorld.y = 8192 - mouseWorld.y;\r\n\r\n        // walk the object array and perform a PolyK hittest against each island\r\n        for (let entry of this.objectArray) {\r\n            if (entry.getType() == ObjectType.ISLAND) {\r\n                var retVal = entry.cartesianHitTest(mouseWorld);\r\n                if (retVal == true) {\r\n                    console.log(\"Hit over \" + entry.getSprite().name);\r\n                } else { \r\n                    //console.log(\"hitTest returns: \" + retVal + \" mouse: \" + mouseWorld.x + \",\" + mouseWorld.y);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    // when done loading, arrange the sea tiles on theSea container\r\n    setup = () => {\r\n        let map1 = new PIXI.Sprite(PIXI.loader.resources[\"images/4x4Region1/image_part_002.png\"].texture);\r\n        let map2 = new PIXI.Sprite(PIXI.loader.resources[\"images/4x4Region1/image_part_003.png\"].texture);\r\n        let map3 = new PIXI.Sprite(PIXI.loader.resources[\"images/4x4Region1/image_part_004.png\"].texture);\r\n        let map4 = new PIXI.Sprite(PIXI.loader.resources[\"images/4x4Region1/image_part_005.png\"].texture);\r\n        let map5 = new PIXI.Sprite(PIXI.loader.resources[\"images/4x4Region1/image_part_006.png\"].texture);\r\n        let map6 = new PIXI.Sprite(PIXI.loader.resources[\"images/4x4Region1/image_part_007.png\"].texture);\r\n        let map7 = new PIXI.Sprite(PIXI.loader.resources[\"images/4x4Region1/image_part_008.png\"].texture);\r\n        let map8 = new PIXI.Sprite(PIXI.loader.resources[\"images/4x4Region1/image_part_009.png\"].texture);\r\n        let map9 = new PIXI.Sprite(PIXI.loader.resources[\"images/4x4Region1/image_part_010.png\"].texture);\r\n        let map10 = new PIXI.Sprite(PIXI.loader.resources[\"images/4x4Region1/image_part_011.png\"].texture);\r\n        let map11 = new PIXI.Sprite(PIXI.loader.resources[\"images/4x4Region1/image_part_012.png\"].texture);\r\n        let map12 = new PIXI.Sprite(PIXI.loader.resources[\"images/4x4Region1/image_part_013.png\"].texture);\r\n        let map13 = new PIXI.Sprite(PIXI.loader.resources[\"images/4x4Region1/image_part_014.png\"].texture);\r\n        let map14 = new PIXI.Sprite(PIXI.loader.resources[\"images/4x4Region1/image_part_015.png\"].texture);\r\n        \r\n        // arranged left to right top to bottom\r\n        // however the upleft tile is empty as is the lower left tile.. only tiles 2-15 are not empty sea\r\n        map1.x = 2048; map1.y = 0; \r\n        map2.x = 4096; map2.y = 0; \r\n        map3.x = 6144; map3.y =0;\r\n        map4.x = 0; map4.y = 2048; \r\n        map5.x = 2048; map5.y = 2048; \r\n        map6.x = 4096; map6.y = 2048; \r\n        map7.x = 6144; map7.y = 2048; \r\n        map8.x = 0; map8.y = 4096; \r\n        map9.x = 2048; map9.y = 4096; \r\n        map10.x = 4096; map10.y = 4096;\r\n        map11.x = 6144; map11.y = 4096;\r\n        map12.x = 0; map12.y = 6144; \r\n        map13.x = 2048; map13.y = 6144;\r\n        map14.x = 4096; map14.y = 6144; \r\n\r\n        this.container.addChild(map1);\r\n        this.container.addChild(map2);\r\n        this.container.addChild(map3);\r\n        this.container.addChild(map4);\r\n        this.container.addChild(map5);\r\n        this.container.addChild(map6);\r\n        this.container.addChild(map7);\r\n        this.container.addChild(map8);\r\n        this.container.addChild(map9);\r\n        this.container.addChild(map10);\r\n        this.container.addChild(map11);\r\n        this.container.addChild(map12);\r\n        this.container.addChild(map13);\r\n        this.container.addChild(map14);\r\n\r\n        this.container.scale.x = this.container.scale.y = this.wheelScale; \r\n\r\n        this.loadRegion(); // for now this loads the islands, ideally it will load the sea tiles too\r\n    \r\n    }\r\n\r\n    init(callback: Function)\r\n    {\r\n        // load our background sea tiles\r\n        PIXI.loader\r\n            .add(\"images/4x4Region1/image_part_002.png\")\r\n            .add(\"images/4x4Region1/image_part_003.png\")\r\n            .add(\"images/4x4Region1/image_part_004.png\")\r\n            .add(\"images/4x4Region1/image_part_005.png\")\r\n            .add(\"images/4x4Region1/image_part_006.png\")\r\n            .add(\"images/4x4Region1/image_part_007.png\")\r\n            .add(\"images/4x4Region1/image_part_008.png\")\r\n            .add(\"images/4x4Region1/image_part_009.png\")\r\n            .add(\"images/4x4Region1/image_part_010.png\")\r\n            .add(\"images/4x4Region1/image_part_011.png\")\r\n            .add(\"images/4x4Region1/image_part_012.png\")\r\n            .add(\"images/4x4Region1/image_part_013.png\")\r\n            .add(\"images/4x4Region1/image_part_014.png\")\r\n            .add(\"images/4x4Region1/image_part_015.png\")\r\n            .add(\"images/islands/region1atlas.json\")        // loader automagically loads all the textures in this atlas\r\n            .add(\"images/ships/corvette2.json\")\r\n            .load(this.setup);\r\n\r\n        this.loadCallback = callback;\r\n\r\n        //Attach event listeners\r\n        window.addEventListener(\r\n        \"keydown\", this.keyDownHandler, false\r\n        );\r\n        window.addEventListener(\r\n        \"keyup\", this.keyUpHandler, false\r\n        );\r\n    }\r\n\r\n    keyDownHandler = (event:any) => {\r\n        console.log(\"Pressed key: \" + event.keyCode);\r\n        if (event.keyCode === 38) { // up\r\n            this.selectedBoat.increaseSail();\r\n        }\r\n        else if (event.keyCode === 40) { // down\r\n            this.selectedBoat.decreaseSail();\r\n        }\r\n        else if (event.keyCode === 37) { // left\r\n            this.selectedBoat.wheelLarboard();\r\n        }\r\n        else if (event.keyCode === 39) { // right\r\n            this.selectedBoat.wheelStarboard();\r\n        }\r\n    }\r\n\r\n    keyUpHandler = () => {\r\n    }\r\n\r\n    private loadRegion(regionName: string = \"region1\") \r\n    {\r\n        // load the region1 background sea tiles\r\n\r\n        // load the region1 islands\r\n\r\n        // load the island game data \r\n        this.loadJSON(\"./data/region1isles.json\", this.onIslesLoaded)\r\n\r\n        // islands are stored in a pool of sprites\r\n    }\r\n\r\n    private onIslesLoaded = (responseText:string) => \r\n    {\r\n        var json_data = JSON.parse(responseText);\r\n        console.log(json_data);\r\n        console.log(PIXI.loader.resources);\r\n\r\n        // run through all entries in the json\r\n        for (var key in json_data) {\r\n            if (json_data.hasOwnProperty(key)) {\r\n                // create a sprite for each\r\n                let isle = new Island();\r\n\r\n                let sprite = new PIXI.Sprite(PIXI.Texture.fromFrame(json_data[key].fileName));\r\n                \r\n                // position the sprite according to the data\r\n                sprite.x = json_data[key].x;\r\n                sprite.y = json_data[key].y;\r\n\r\n                // tag each sprite with its name (the key)\r\n                sprite.name = key;\r\n\r\n                // add sprite to the isle, this container, and the tracked object array\r\n                isle.setSprite(sprite);\r\n                this.container.addChild(sprite);\r\n                this.objectArray.push(isle);\r\n\r\n                // save its polygonal data\r\n                isle.setPolyData(json_data[key].polygonPts);\r\n\r\n                console.log(\"Adding \" + sprite.name + \" to theSea\");\r\n            }\r\n        }\r\n\r\n\r\n        // add a boat near guadelupe\r\n        let boat = new Ship();\r\n        boat.init();\r\n        boat.setPosition(6200,2600);\r\n        this.container.addChild(boat.getSprite());\r\n        this.objectArray.push(boat);\r\n\r\n        this.selectedBoat = boat;\r\n\r\n        // test polyK integration\r\n        this.polyKTest();\r\n\r\n        // final step in loading process.. can now call loadcallback\r\n        this.loadCallback();\r\n    }\r\n\r\n    private loadJSON(jsonFile:string, callback:Function) \r\n    {\r\n        var xobj = new XMLHttpRequest();\r\n            xobj.overrideMimeType(\"application/json\");\r\n        xobj.open('GET', './data/region1isles.json', true); // Replace 'my_data' with the path to your file\r\n        xobj.onreadystatechange = function () {\r\n            if (xobj.readyState == 4 && xobj.status == 200) {\r\n                // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\r\n                callback(xobj.responseText);\r\n            }\r\n        };\r\n        xobj.send(null);  \r\n    }\r\n\r\n    public getContainer()\r\n    {\r\n        return this.container;\r\n    }\r\n\r\n    public update()\r\n    {\r\n        this.container.x += this.deltaX;\r\n        this.container.y += this.deltaY;\r\n\r\n        if (this.container.x > 0)\r\n            this.container.x = 0;\r\n        \r\n        if (this.container.y > 0)\r\n            this.container.y = 0;\r\n\r\n        if (this.container.x < -(this.container.width - window.innerWidth))\r\n            this.container.x = -(this.container.width - window.innerWidth);\r\n\r\n        if (this.container.y < -(this.container.height - window.innerHeight))\r\n            this.container.y = -(this.container.height - window.innerHeight);\r\n\r\n        this.deltaX = 0;\r\n        this.deltaY = 0; // clear the data, await next mousemove\r\n\r\n        // console.log(this.deltaX + \",\" + this.deltaY);\r\n\r\n        this.updateObjectArray();\r\n    }\r\n\r\n    private updateObjectArray()\r\n    {\r\n        // loop through our object array and call each element's update function\r\n        for (let gameObj of this.objectArray)\r\n        {\r\n            gameObj.update();\r\n        }\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/source-map-loader!./src/theSea.ts","import GameObject from './gameobject';\r\nimport { ObjectType } from './gameobject';\r\n\r\nexport default class Island extends GameObject\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.objType = ObjectType.ISLAND;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./node_modules/source-map-loader!./src/island.ts","//\r\n// ship class to handle all things... boat!\r\n//\r\n\r\nimport GameObject from './gameobject';\r\nimport { ObjectType } from './gameobject';\r\nimport Victor = require('victor');\r\n\r\nexport const enum ShipType {\r\n    SLOOP,\r\n    SCHOONER,\r\n    XEBEC,\r\n    BRIG,\r\n    CORVETTE\r\n}\r\n\r\nexport default class Ship extends GameObject\r\n{\r\n    private heading:Victor; // normalized ship direction\r\n    private degreeHeading:number; // heading expressed as degrees\r\n    private speed:number;   // scalar for speed (why not use a velocity vector to combine heading and speed?)\r\n    private targetSpeed:number;\r\n    private name:string;    // all boats must have a name! ;)\r\n    private sailState:number; // 0 = down, 1 = full sail, 2 = half sail\r\n\r\n    private shipType:ShipType;\r\n\r\n    private usingFrame:number; // frame number in use, cached to prevent texture swap spam\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.objType = ObjectType.SHIP;\r\n        this.shipType = ShipType.CORVETTE; \r\n        this.sailState = 0; // down\r\n        this.speed = 0;\r\n        this.targetSpeed = 0;\r\n        this.heading = new Victor(1,0); // east\r\n        this.degreeHeading = this.heading.angleDeg(); \r\n    }\r\n\r\n    public init()\r\n    {\r\n        this.sprite = new PIXI.Sprite(); // an empty sprite\r\n        this.matchHeadingToSprite(); // initialize the texture its using\r\n    }\r\n\r\n    public setPosition(x:number, y: number) \r\n    {\r\n        this.sprite.x = x;\r\n        this.sprite.y = y;\r\n    }\r\n\r\n    private matchHeadingToSprite() {\r\n        // pick the spirte that is closest to ships heading... \r\n        // we have 8 directional sprites\r\n        let a = this.heading.angleDeg();\r\n        let s = this.getSprite();\r\n        let modFrame = 0;\r\n        let frameName = \"\";\r\n\r\n        if (this.sailState == 0) // if sails down, offset frame num by 8  ie 0003 will become 00011\r\n            modFrame = 8;\r\n        \r\n        if (this.shipType == ShipType.CORVETTE)\r\n            frameName = \"Corvette2\";\r\n        else    \r\n            frameName = \"Corvette2\"; // add other ship sprites here as they are added\r\n\r\n        let frameNum = 0;\r\n\r\n        if (a <= 22.5 && a > -22.5 ) // the right facing image\r\n            frameNum = 3;\r\n        else if (a <= 67.5 && a > 22.5) // the up and right image\r\n            frameNum = 2;\r\n        else if (a <= 112.5 && a > 67.5) // the up facing image\r\n            frameNum = 1;\r\n        else if (a <= 157.5 && a > 112.5) // the up and right image\r\n            frameNum = 8;\r\n        else if (a <= -157.5 || a > 157.5) // the left facing image\r\n            frameNum = 7;\r\n        else if (a <= -112.5 && a > -157.5) // the left and down image\r\n            frameNum = 6;\r\n        else if (a <= -67.5 && a > -112.5) // the down image\r\n            frameNum = 5;\r\n        else if (a <= -22.5 && a > -67.5) // the down and right image\r\n            frameNum = 4;\r\n        else    \r\n            console.log(\"Ship class has invalid angle, texture could not be set\");\r\n\r\n        if (this.usingFrame != frameNum + modFrame) {\r\n            // replace our texture with the appropriate facing\r\n            s.texture = PIXI.Texture.fromFrame(frameName + this.getFrameString(frameNum, modFrame) + \".png\");\r\n            //console.log(\"replacing texture with frame: \" + (frameNum + modFrame));\r\n            console.log(\"heading:\" + a.toFixed(0) + \" frameDirection: \" + frameNum)\r\n            this.usingFrame = frameNum + modFrame;\r\n        }\r\n    }\r\n\r\n    private getFrameString(frameNum:number, mod:number)\r\n    {\r\n        let n:number = frameNum;\r\n\r\n        if (mod != 0)\r\n            n += mod;\r\n\r\n        return this.zeroPad(n, 4);\r\n    }\r\n\r\n    private zeroPad (num:number, numZeros:number) {\r\n        var an = Math.abs (num);\r\n        var digitCount = 1 + Math.floor (Math.log (an) / Math.LN10);\r\n        if (digitCount >= numZeros) {\r\n            return num.toString();\r\n        }\r\n        var zeroString = Math.pow (10, numZeros - digitCount).toString ().substr (1);\r\n        return num < 0 ? '-' + zeroString + an : zeroString + an;\r\n    }\r\n\r\n    public increaseSail = () =>  {\r\n        this.sailState = 2; // no support for half sail as yet\r\n        this.targetSpeed = 1; // ramp up to 60 pixels/sec speed is in pixels per frame\r\n        console.log(\"increasing sail Captain!\");\r\n    }\r\n\r\n    public decreaseSail = () => {\r\n        this.sailState = 0; // straight to no sails\r\n        this.targetSpeed = 0; // ramp down to no velocity\r\n        console.log(\"Aye! Decreasing sail!\");\r\n    }\r\n\r\n    public wheelStarboard() {\r\n        this.heading.rotateDeg(-15);\r\n        this.heading.normalize();\r\n        this.degreeHeading = this.heading.angleDeg();\r\n        console.log(\"Aye Starboard wheel! Heading to: \" + this.degreeHeading.toFixed(0));\r\n    }\r\n\r\n    // Victor lib is broken... rotate does what rotateby docs say, rotateby is broken\r\n    public wheelLarboard() {\r\n        this.heading.rotateDeg(15);\r\n        this.heading.normalize();\r\n        this.degreeHeading = this.heading.angleDeg();\r\n\r\n        console.log(\"Wheel a'Larboard Captain! Heading to: \" + this.degreeHeading.toFixed(0) + \" angDeg: \" + this.heading.angleDeg().toFixed(0));\r\n    }\r\n\r\n    private updatePosition() {\r\n        // modify x and y based off heading and speed\r\n        let s = this.getSprite();\r\n        s.x += this.speed * this.heading.x;\r\n        s.y += this.speed * -this.heading.y; // y is inverted... heading in cartesean, but our position coords origin is top,left\r\n    }\r\n\r\n    update() {\r\n        // update the sprite position by the speed + heading\r\n        if (this.targetSpeed != this.speed)\r\n        {\r\n            if (this.targetSpeed > this.speed) {\r\n                this.speed += 0.01;\r\n                if (this.speed > this.targetSpeed)\r\n                    this.speed = this.targetSpeed\r\n            }\r\n            else {\r\n                this.speed -= 0.01;\r\n                if (this.speed < this.targetSpeed)\r\n                    this.speed = this.targetSpeed;\r\n            }\r\n        }\r\n\r\n        this.updatePosition();\r\n\r\n        // update its sprite if necessary\r\n        this.matchHeadingToSprite();\r\n\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./node_modules/source-map-loader!./src/ship.ts","exports = module.exports = Victor;\n\n/**\n * # Victor - A JavaScript 2D vector class with methods for common vector operations\n */\n\n/**\n * Constructor. Will also work without the `new` keyword\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = Victor(42, 1337);\n *\n * @param {Number} x Value of the x axis\n * @param {Number} y Value of the y axis\n * @return {Victor}\n * @api public\n */\nfunction Victor (x, y) {\n\tif (!(this instanceof Victor)) {\n\t\treturn new Victor(x, y);\n\t}\n\n\t/**\n\t * The X axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.x;\n\t *     // => 42\n\t *\n\t * @api public\n\t */\n\tthis.x = x || 0;\n\n\t/**\n\t * The Y axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.y;\n\t *     // => 21\n\t *\n\t * @api public\n\t */\n\tthis.y = y || 0;\n};\n\n/**\n * # Static\n */\n\n/**\n * Creates a new instance from an array\n *\n * ### Examples:\n *     var vec = Victor.fromArray([42, 21]);\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromArray\n * @param {Array} array Array with the x and y values at index 0 and 1 respectively\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromArray = function (arr) {\n\treturn new Victor(arr[0] || 0, arr[1] || 0);\n};\n\n/**\n * Creates a new instance from an object\n *\n * ### Examples:\n *     var vec = Victor.fromObject({ x: 42, y: 21 });\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromObject\n * @param {Object} obj Object with the values for x and y\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromObject = function (obj) {\n\treturn new Victor(obj.x || 0, obj.y || 0);\n};\n\n/**\n * # Manipulation\n *\n * These functions are chainable.\n */\n\n/**\n * Adds another vector's X axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addX(vec2);\n *     vec1.toString();\n *     // => x:30, y:10\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addX = function (vec) {\n\tthis.x += vec.x;\n\treturn this;\n};\n\n/**\n * Adds another vector's Y axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addY(vec2);\n *     vec1.toString();\n *     // => x:10, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addY = function (vec) {\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds another vector to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.add(vec2);\n *     vec1.toString();\n *     // => x:30, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.add = function (vec) {\n\tthis.x += vec.x;\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to both vector axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalar(2);\n *     vec.toString();\n *     // => x: 3, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalar = function (scalar) {\n\tthis.x += scalar;\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the X axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarX(2);\n *     vec.toString();\n *     // => x: 3, y: 2\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarX = function (scalar) {\n\tthis.x += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarY(2);\n *     vec.toString();\n *     // => x: 1, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarY = function (scalar) {\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the X axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractX(vec2);\n *     vec1.toString();\n *     // => x:80, y:50\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractX = function (vec) {\n\tthis.x -= vec.x;\n\treturn this;\n};\n\n/**\n * Subtracts the Y axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractY(vec2);\n *     vec1.toString();\n *     // => x:100, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractY = function (vec) {\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtract(vec2);\n *     vec1.toString();\n *     // => x:80, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtract = function (vec) {\n\tthis.x -= vec.x;\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalar(20);\n *     vec.toString();\n *     // => x: 80, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalar = function (scalar) {\n\tthis.x -= scalar;\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarX(20);\n *     vec.toString();\n *     // => x: 80, y: 200\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarX = function (scalar) {\n\tthis.x -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarY(20);\n *     vec.toString();\n *     // => x: 100, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarY = function (scalar) {\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Divides the X axis by the x component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.divideX(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideX = function (vector) {\n\tthis.x /= vector.x;\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.divideY(vec2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideY = function (vector) {\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by a axis values of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.divide(vec2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Victor} vector The vector to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divide = function (vector) {\n\tthis.x /= vector.x;\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalar(2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalar = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t}\n\n\treturn this;\n};\n\n/**\n * Divides the X axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarX(2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarX = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarY(2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarY = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.y = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Inverts the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertX();\n *     vec.toString();\n *     // => x:-100, y:50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertX = function () {\n\tthis.x *= -1;\n\treturn this;\n};\n\n/**\n * Inverts the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertY();\n *     vec.toString();\n *     // => x:100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertY = function () {\n\tthis.y *= -1;\n\treturn this;\n};\n\n/**\n * Inverts both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invert();\n *     vec.toString();\n *     // => x:-100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invert = function () {\n\tthis.invertX();\n\tthis.invertY();\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by X component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyX = function (vector) {\n\tthis.x *= vector.x;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by Y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyY = function (vector) {\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by values from a given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.multiply(vec2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Victor} vector The vector to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiply = function (vector) {\n\tthis.x *= vector.x;\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalar(2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Number} The scalar to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalar = function (scalar) {\n\tthis.x *= scalar;\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarX(2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarX = function (scalar) {\n\tthis.x *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarY(2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarY = function (scalar) {\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Normalize\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.normalize = function () {\n\tvar length = this.length();\n\n\tif (length === 0) {\n\t\tthis.x = 1;\n\t\tthis.y = 0;\n\t} else {\n\t\tthis.divide(Victor(length, length));\n\t}\n\treturn this;\n};\n\nVictor.prototype.norm = Victor.prototype.normalize;\n\n/**\n * If the absolute vector axis is greater than `max`, multiplies the axis by `factor`\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.limit(80, 0.9);\n *     vec.toString();\n *     // => x:90, y:50\n *\n * @param {Number} max The maximum value for both x and y axis\n * @param {Number} factor Factor by which the axis are to be multiplied with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.limit = function (max, factor) {\n\tif (Math.abs(this.x) > max){ this.x *= factor; }\n\tif (Math.abs(this.y) > max){ this.y *= factor; }\n\treturn this;\n};\n\n/**\n * Randomizes both vector axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomize(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:67, y:73\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomize = function (topLeft, bottomRight) {\n\tthis.randomizeX(topLeft, bottomRight);\n\tthis.randomizeY(topLeft, bottomRight);\n\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeX(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:55, y:50\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeX = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.x, bottomRight.x);\n\tvar max = Math.max(topLeft.x, bottomRight.x);\n\tthis.x = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeY(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:100, y:66\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeY = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.y, bottomRight.y);\n\tvar max = Math.max(topLeft.y, bottomRight.y);\n\tthis.y = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomly randomizes either axis between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeAny(new Victor(50, 60), new Victor(70, 80));\n *     vec.toString();\n *     // => x:100, y:77\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeAny = function (topLeft, bottomRight) {\n\tif (!! Math.round(Math.random())) {\n\t\tthis.randomizeX(topLeft, bottomRight);\n\t} else {\n\t\tthis.randomizeY(topLeft, bottomRight);\n\t}\n\treturn this;\n};\n\n/**\n * Rounds both axis to an integer value\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.unfloat = function () {\n\tthis.x = Math.round(this.x);\n\tthis.y = Math.round(this.y);\n\treturn this;\n};\n\n/**\n * Rounds both axis to a certain precision\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @param {Number} Precision (default: 8)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.toFixed = function (precision) {\n\tif (typeof precision === 'undefined') { precision = 8; }\n\tthis.x = this.x.toFixed(precision);\n\tthis.y = this.y.toFixed(precision);\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the X axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixX(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:100\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixX = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.x = (1 - amount) * this.x + amount * vec.x;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the Y axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixY(vec2, 0.5);\n *     vec.toString();\n *     // => x:100, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixY = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.y = (1 - amount) * this.y + amount * vec.y;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mix(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mix = function (vec, amount) {\n\tthis.mixX(vec, amount);\n\tthis.mixY(vec, amount);\n\treturn this;\n};\n\n/**\n * # Products\n */\n\n/**\n * Creates a clone of this vector\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = vec1.clone();\n *\n *     vec2.toString();\n *     // => x:10, y:10\n *\n * @return {Victor} A clone of the vector\n * @api public\n */\nVictor.prototype.clone = function () {\n\treturn new Victor(this.x, this.y);\n};\n\n/**\n * Copies another vector's X component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyX(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:10\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyX = function (vec) {\n\tthis.x = vec.x;\n\treturn this;\n};\n\n/**\n * Copies another vector's Y component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyY(vec1);\n *\n *     vec2.toString();\n *     // => x:10, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyY = function (vec) {\n\tthis.y = vec.y;\n\treturn this;\n};\n\n/**\n * Copies another vector's X and Y components in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copy(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copy = function (vec) {\n\tthis.copyX(vec);\n\tthis.copyY(vec);\n\treturn this;\n};\n\n/**\n * Sets the vector to zero (0,0)\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *\t\t var1.zero();\n *     vec1.toString();\n *     // => x:0, y:0\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.zero = function () {\n\tthis.x = this.y = 0;\n\treturn this;\n};\n\n/**\n * Calculates the dot product of this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.dot(vec2);\n *     // => 23000\n *\n * @param {Victor} vector The second vector\n * @return {Number} Dot product\n * @api public\n */\nVictor.prototype.dot = function (vec2) {\n\treturn this.x * vec2.x + this.y * vec2.y;\n};\n\nVictor.prototype.cross = function (vec2) {\n\treturn (this.x * vec2.y ) - (this.y * vec2.x );\n};\n\n/**\n * Projects a vector onto another vector, setting itself to the result.\n *\n * ### Examples:\n *     var vec = new Victor(100, 0);\n *     var vec2 = new Victor(100, 100);\n *\n *     vec.projectOnto(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want to project this vector onto\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.projectOnto = function (vec2) {\n    var coeff = ( (this.x * vec2.x)+(this.y * vec2.y) ) / ((vec2.x*vec2.x)+(vec2.y*vec2.y));\n    this.x = coeff * vec2.x;\n    this.y = coeff * vec2.y;\n    return this;\n};\n\n\nVictor.prototype.horizontalAngle = function () {\n\treturn Math.atan2(this.y, this.x);\n};\n\nVictor.prototype.horizontalAngleDeg = function () {\n\treturn radian2degrees(this.horizontalAngle());\n};\n\nVictor.prototype.verticalAngle = function () {\n\treturn Math.atan2(this.x, this.y);\n};\n\nVictor.prototype.verticalAngleDeg = function () {\n\treturn radian2degrees(this.verticalAngle());\n};\n\nVictor.prototype.angle = Victor.prototype.horizontalAngle;\nVictor.prototype.angleDeg = Victor.prototype.horizontalAngleDeg;\nVictor.prototype.direction = Victor.prototype.horizontalAngle;\n\nVictor.prototype.rotate = function (angle) {\n\tvar nx = (this.x * Math.cos(angle)) - (this.y * Math.sin(angle));\n\tvar ny = (this.x * Math.sin(angle)) + (this.y * Math.cos(angle));\n\n\tthis.x = nx;\n\tthis.y = ny;\n\n\treturn this;\n};\n\nVictor.prototype.rotateDeg = function (angle) {\n\tangle = degrees2radian(angle);\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateTo = function(rotation) {\n\treturn this.rotate(rotation-this.angle());\n};\n\nVictor.prototype.rotateToDeg = function(rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateTo(rotation);\n};\n\nVictor.prototype.rotateBy = function (rotation) {\n\tvar angle = this.angle() + rotation;\n\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateByDeg = function (rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateBy(rotation);\n};\n\n/**\n * Calculates the distance of the X axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceX(vec2);\n *     // => -100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceX = function (vec) {\n\treturn this.x - vec.x;\n};\n\n/**\n * Same as `distanceX()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.absDistanceX(vec2);\n *     // => 100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceX = function (vec) {\n\treturn Math.abs(this.distanceX(vec));\n};\n\n/**\n * Calculates the distance of the Y axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => -10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceY = function (vec) {\n\treturn this.y - vec.y;\n};\n\n/**\n * Same as `distanceY()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => 10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceY = function (vec) {\n\treturn Math.abs(this.distanceY(vec));\n};\n\n/**\n * Calculates the euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distance(vec2);\n *     // => 100.4987562112089\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distance = function (vec) {\n\treturn Math.sqrt(this.distanceSq(vec));\n};\n\n/**\n * Calculates the squared euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceSq(vec2);\n *     // => 10100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceSq = function (vec) {\n\tvar dx = this.distanceX(vec),\n\t\tdy = this.distanceY(vec);\n\n\treturn dx * dx + dy * dy;\n};\n\n/**\n * Calculates the length or magnitude of the vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.length();\n *     // => 111.80339887498948\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.length = function () {\n\treturn Math.sqrt(this.lengthSq());\n};\n\n/**\n * Squared length / magnitude\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.lengthSq();\n *     // => 12500\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.lengthSq = function () {\n\treturn this.x * this.x + this.y * this.y;\n};\n\nVictor.prototype.magnitude = Victor.prototype.length;\n\n/**\n * Returns a true if vector is (0, 0)\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     vec.zero();\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isZero = function() {\n\treturn this.x === 0 && this.y === 0;\n};\n\n/**\n * Returns a true if this vector is the same as another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(100, 50);\n *     vec1.isEqualTo(vec2);\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isEqualTo = function(vec2) {\n\treturn this.x === vec2.x && this.y === vec2.y;\n};\n\n/**\n * # Utility Methods\n */\n\n/**\n * Returns an string representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toString();\n *     // => x:10, y:20\n *\n * @return {String}\n * @api public\n */\nVictor.prototype.toString = function () {\n\treturn 'x:' + this.x + ', y:' + this.y;\n};\n\n/**\n * Returns an array representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toArray();\n *     // => [10, 20]\n *\n * @return {Array}\n * @api public\n */\nVictor.prototype.toArray = function () {\n\treturn [ this.x, this.y ];\n};\n\n/**\n * Returns an object representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toObject();\n *     // => { x: 10, y: 20 }\n *\n * @return {Object}\n * @api public\n */\nVictor.prototype.toObject = function () {\n\treturn { x: this.x, y: this.y };\n};\n\n\nvar degrees = 180 / Math.PI;\n\nfunction random (min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction radian2degrees (rad) {\n\treturn rad * degrees;\n}\n\nfunction degrees2radian (deg) {\n\treturn deg / degrees;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/victor/index.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}